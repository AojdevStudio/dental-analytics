# .coderabbit.yaml - Configuration to focus on code files only

# Global review configuration
reviews:
  # Path-based instructions to exclude specific directories and files
  path_instructions:
    # Exclude system/cache directories
    - path: ".bmad-core"
      instructions: |
        Skip reviewing this system directory.

    - path: ".claude"
      instructions: |
        Skip reviewing this AI assistant directory.

    - path: ".code"
      instructions: |
        Skip reviewing this IDE configuration directory.

    - path: ".cursor"
      instructions: |
        Skip reviewing this IDE configuration directory.

    - path: ".mypy_cache"
      instructions: |
        Skip reviewing this Python type checking cache directory.

    - path: ".old-files"
      instructions: |
        Skip reviewing this backup files directory.

    - path: ".playwright-mcp"
      instructions: |
        Skip reviewing this testing framework directory.

    - path: ".pytest_cache"
      instructions: |
        Skip reviewing this test cache directory.

    - path: ".serena"
      instructions: |
        Skip reviewing this AI memory system directory.

    - path: ".ruff_cache"
      instructions: |
        Skip reviewing this Python linter cache directory.

    - path: ".uv-cache"
      instructions: |
        Skip reviewing this package manager cache directory.

    # Exclude documentation and configuration directories
    - path: "ai-docs"
      instructions: |
        Skip reviewing this AI documentation directory.

    - path: "docs"
      instructions: |
        Skip reviewing this documentation directory.

    - path: "logs"
      instructions: |
        Skip reviewing this logs directory.

    - path: "planning"
      instructions: |
        Skip reviewing this planning documentation directory.

    - path: "scripts"
      instructions: |
        Skip reviewing this utility scripts directory.

    - path: "specs"
      instructions: |
        Skip reviewing this specification documents directory.

    # Focus on actual code files with detailed review
    - path: "**/*.js"
      instructions: |
        Review the JavaScript code for:
        - Code quality and best practices
        - Performance issues
        - Security vulnerabilities
        - Logic errors
        - Adherence to coding standards

    - path: "**/*.ts"
      instructions: |
        Review the TypeScript code for:
        - Type safety and correctness
        - Code quality and best practices
        - Performance issues
        - Security vulnerabilities
        - Logic errors

    - path: "**/*.jsx"
      instructions: |
        Review the React JSX code for:
        - Component structure and patterns
        - Performance optimizations
        - Accessibility compliance
        - Code quality and best practices

    - path: "**/*.tsx"
      instructions: |
        Review the React TypeScript code for:
        - Type safety in React components
        - Component patterns and architecture
        - Performance optimizations
        - Code quality and best practices

    - path: "**/*.py"
      instructions: |
        Review the Python code for:
        - PEP 8 compliance
        - Code quality and pythonic patterns
        - Performance issues
        - Security vulnerabilities
        - Logic errors

    - path: "**/*.java"
      instructions: |
        Review the Java code for:
        - Code quality and best practices
        - Performance issues
        - Security vulnerabilities
        - Design patterns usage
        - Logic errors

    - path: "**/*.go"
      instructions: |
        Review the Go code for:
        - Go idioms and best practices
        - Error handling patterns
        - Performance considerations
        - Code quality
        - Logic errors

    - path: "**/*.rs"
      instructions: |
        Review the Rust code for:
        - Memory safety and ownership
        - Performance optimizations
        - Error handling with Result types
        - Code quality and idiomatic Rust
        - Logic errors

# Tools configuration - enable code analysis tools
  tools:
    # Enable AST-grep for advanced code pattern matching
    ast-grep:
      essential_rules: true
      rule_dirs:
        - "lint-rules"
      packages:
        - "coderabbitai/essential-rules"

# Code generation settings (if using docstring generation)
code_generation:
  docstrings:
    path_instructions:
      # Only generate docstrings for code files
      - path: "**/*.py"
        instructions: |
          Generate comprehensive docstrings following Google style.
          Include parameter types, return types, and examples where appropriate.

      - path: "**/*.ts"
        instructions: |
          Generate TSDoc compatible documentation.
          Include @param and @returns annotations.
